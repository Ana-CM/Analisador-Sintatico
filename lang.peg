# Ana Carolina Mendes Lino -  201865212AC 
# Thiago Silva Miranda - 201865553C
 grammar LANG

    Prog        <- Spacing Definition* Func+ EndOfFile %MakeProg
    Definition  <- Data Type LBrace Declaration+ RBrace %MakeDefinition
    Declaration <- Identifier ColonColon Type Semi %MakeDecl
    Func        <- Identifier LPar Params? RPar  ( Colon Type ( Comma Type)* )? LBrace Cmd* RBrace %MakeFunc
    Params      <- Identifier ColonColon Type (Comma Identifier ColonColon Type)* %MakeParams
    Type        <- Btype (LBrack RBrack)* %MakeType
    Btype       <- TyInt 
                / TyChar 
                / TyBool 
                / TyFloat 
                / UserType 

    Cmd <- LBrace Cmd+ RBrace %MakeCmdBrace
        / If LPar Exp RPar Cmd (Else Cmd)? %MakeIf
        / Iterate LPar Exp RPar Cmd %MakeIterate
        / Read LValue Semi %MakeRead
        / Print Exp Semi %MakePrint
        / Return Exp ( Comma Exp )* Semi %MakeReturn
        / LValue Eq Exp Semi %MakeAttr
        / Identifier LPar Exps? RPar ( Lt LValue ( Comma LValue )* Gt )? Semi %MakeCallAttr
        

    Exp  <- Rexp (And Rexp)* %MakeExp
    Rexp <- Aexp Lt Aexp %MakeLt
        / Aexp ((Eqeq / Ne) Aexp)* %MakeRexp
    Aexp <- Mexp ((Plus / Minus) Mexp)* %MakeAexp
    Mexp <- Sexp ((Times / Div / Mod) Sexp)* %MakeMexp

    Sexp <- Not Sexp %MakeNot
        / Minus Sexp %MakeNegative
        / True 
        / False 
        / Null 
        / Decimal 
        / Integer 
        / LiteralCharacter
        / Pexp

            
    Pexp <- New Type ( LBrack Exp RBrack )? %MakeNew
        / Identifier LPar Exps? RPar LBrack Exp RBrack %MakeCallBrack
        / LValue 
        / LPar Exp RPar %MakeParExp

    LValue <- Identifier (LBrack Exp RBrack / Dot Identifier)* %MakeLValue
    Exps   <- Exp ( Comma Exp )*
    
    # Lexico
    Identifier       <- ([a-z] ([a-z] / [0-9] / "_" / [A-Z])*) Spacing
    UserType         <- ([A-Z] ([a-z] / [0-9] / "_" / [A-Z])*) Spacing %MakeUserType
    LiteralCharacter <- "'" ("\\n" / "\\r" / "\\t" / "\\b" /  "\\\\" / (.) ) "'" Spacing %MakeLiteralCharacter
    Integer          <- [0-9]+ Spacing %MakeInteger
    Decimal          <- ([0-9]* Dot [0-9]+) Spacing %MakeDecimal

    TyInt   <- "Int" Spacing %MakeTyInt
    TyChar  <- "Char" Spacing %MakeTyChar
    TyBool  <- "Bool" Spacing %MakeTyBool
    TyFloat <- "Float" Spacing %MakeTyFloat

    Null    <- "null" Spacing %MakeNull
    Return  <- "return" Spacing 
    New     <- "new" Spacing       
    If      <- "if" Spacing            
    Else    <- "else" Spacing  
    Iterate <- "iterate" Spacing  
    Print   <- "print" Spacing   
    Read    <- "read" Spacing  
    Data    <- "data" Spacing
    
    ColonColon <- "::" Spacing               
    Colon      <- ":" Spacing       
    LPar       <- "(" Spacing               
    RPar       <- ")" Spacing               
    LBrack     <- "[" Spacing                
    RBrack     <- "]" Spacing                
    LBrace     <- "{" Spacing                
    RBrace     <- "}" Spacing                
    Gt         <- ">" Spacing                
    Lt         <- "<" Spacing                
    Semi       <- ";" Spacing               
    Dot        <- "." Spacing              
    Comma      <- "," Spacing               
    Eq         <- "=" Spacing                 
    Eqeq       <- "==" Spacing              
    Ne         <- "!=" Spacing               
    Plus       <- "+" Spacing                 
    Minus      <- "-" Spacing                
    Times      <- "*" Spacing                
    Div        <- "/" Spacing                
    Mod        <- "%" Spacing                
    And        <- "&&" Spacing               
    Not        <- "!"  Spacing

    Spacing   <- ( Space / Comment )*
    True     <- "true" Spacing %MakeTrue
    False     <- "false" Spacing %MakeFalse
    Comment   <- "--" (!EndOfLine .)* EndOfLine / "{-" (!"-}" .)* "-}" 
    Space     <- " " / "\t" / EndOfLine
    EndOfLine <- "\r\n" / "\n" / "\r" 
    EndOfFile <- !.

